#!/usr/bin/python
""" Generate static analysis test files

Those tests have a very heavy number of combinations. Currently 140+.

Some work, some don't. And when they don't, the reason is often unknown:
* Is it a kaioretry issue ?
* Is it a mypy issue ?
* Is it a python issue ?

"""

import os
import sys
from dataclasses import dataclass


# The repository subdirectory the tests are written in
OUTPUT_DIRECTORY = "test/static_analysis"

# Define if types of the decorated function should be revealed or not
REVEAL_TYPE = int(os.getenv("REVEAL_TYPE", "0"))

@dataclass
class FunctionSignature:
    params_style: str
    params_format: str
    params_type: str
    call_params: str
    return_type: str

    def params(self) -> str:
        return self.params_format.format(ptype=self.params_type)

    @property
    def test_name(self) -> str:
        return "_".join([self.params_style, self.params_type.lower(), self.return_type.lower()])


@dataclass
class Function:
    name: str
    signature: FunctionSignature
    coroutine: bool
    
    def __str__(self) -> str:
        if self.coroutine:
            async_kw = "async "
        else:
            async_kw = ""
        return f"""{async_kw}def {self.name}({self.signature.params()}) -> {self.signature.return_type}:
    ''' ... '''
    return 'return_value'"""

    def type(self):
        return f"Callable[..., {self.signature.return_type}]"

    @property
    def test_name(self):
        """Return the part of the test file name that matches this Funcion"""
        return "_".join(["async" if self.coroutine else "sync", self.signature.test_name])


def signatures():
    """ Generate function combinations """
    for return_type in {"Any", "str"}:
        for ptype in {"int", "Any"}:
            for params_style, params_format, call_params in (
                    ("args", "*args: {ptype}", "1, 2"),
                    ("param", "x: {ptype}, y: {ptype}", "1, 2"),
                    ("kwargs", "**kwargs: {ptype}", "x=1, y=2")):
                yield FunctionSignature(
                    params_style, params_format, ptype, call_params, return_type)


def functions(input_data):
    """ Generate original function """

    if input_data["decorator_name"] == "aioretry":
        ftypes = (True, False)
    else:
        ftypes = (False,)

    for coroutine in ftypes:
        for signature in signatures():
            yield Function("func", signature, coroutine)
            """
            yield data | input_data | {
                "return_type": return_type.lower(),
                "function_type": ftype,
                "function": function_template.format(
                    return_type=return_type, async_kw=async_kw, **data)}
            """



@dataclass
class Decoration:
    decorator_name: str
    build: str
    function: Function
    used_as_decorator: bool
    build_first: bool

    @property
    def decoration(self) -> str:
        if self.used_as_decorator:
            return self.function.name
        return "wrapped"

    @property
    def call(self) -> str:
        if self.decorator_name == "aioretry":
            await_kw = "await "
        else:
            await_kw= ""
        return f"{await_kw}{self.decoration}({self.function.signature.call_params})"

    @property
    def test_name(self) -> str:
        """Return the name of the test"""
        if any(self.build.startswith(dec) for dec in ("retry", "aioretry")):
            build_type = "main"
            if "=" in self.build:
                extra = ("named", )
            else:
                extra = ("unnamed", )
        else:
            build_type = "built"
            extra = ()
        return "_".join([self.decorator_name, build_type,
                         "direct" if self.used_as_decorator else "by_call",
                         *extra, self.function.test_name])

    def __str__(self) -> str:
        if self.used_as_decorator:
            return f"""@{self.build}
{self.function}"""
        else:
            return f"""{self.function}

{self.decoration} = {self.build}({self.function.name})"""
        

def decorations(input_data) -> str:
    """ Generate decorated functions """

    decorators = (
        "Retry(exceptions=(ValueError, NotImplementedError), "
        "context=Context(tries=5, delay=2)).{decorator_name}",
        '{decorator_name}(Exception, 2)',
        '{decorator_name}(exceptions=Exception, tries=2)')

    for function in functions(input_data):
        for build in decorators:
            for used_as_decorator in (True, False):
                for build_first in (True, False):
                    yield Decoration(
                        input_data["decorator_name"], build.format(**input_data), function,
                        used_as_decorator, build_first)


@dataclass
class TestFile:
    decoration: Decoration

    @property
    def name(self) -> str:
        return f"{self.decoration.test_name}.py"

    @property
    def reveal_type(self) -> str:
        if REVEAL_TYPE:
            return """
from typing_extensions import reveal_type
reveal_type(func)
            """
        return ""

    def __str__(self) -> str:
        return f"""'''Test {self.name} '''

# pylint: disable=unused-import, unused-argument, invalid-name, R0801


import asyncio
from typing import Any

from kaioretry import retry, aioretry, Retry, Context


{self.decoration}{self.reveal_type}


async def use_decoration(parameter: str) -> str:
    ''' obtain result and use it '''
    result = {self.decoration.call}
    assert isinstance(result, str)
    return f"parameter is {{parameter}}. result is {{result}}"


if __name__ == "__main__":
    print(asyncio.run(use_decoration("value")))
"""


def programs(decorator_name) -> str:

    if decorator_name == "aioretry":
        input_data = {"decorator_name": decorator_name}
    else:
        input_data = {"decorator_name": decorator_name}

    for decoration in decorations(input_data):
        yield TestFile(decoration)

        
def generate_test_files(only=()):
    for decorator_name in ("aioretry", "retry"):
        for program in programs(decorator_name):
            filename = os.path.join(OUTPUT_DIRECTORY, program.name)
            if not only or filename in only:
                with open(filename, 'w') as file_:
                    file_.write(str(program))


if __name__ == "__main__":
    generate_test_files(set(sys.argv[1:]))
